#!/usr/bin/env bash
#?
# checkforupdates - Check for XBPS package updates
#
# USAGE
#
#     checkforupdates OPTIONS
#
# OPTIONS
#
#     -p PREFIX    (Optional) Print prefix before any update information text
#     -n           (Optional) Only show number of package which need updates
#     -e           (Optional) Do not print any text if there are no updates
#     -l           (Optional) Show all information on one line
#
# BEHAVIOR
#
#     Shows names of packages which need an update.
#
#?

# {{{1 Configuration
print_prefix=""

# {{{1 Helpers
function die() {
    echo "Error: $@" >&2
    exit 1
}

# {{{1 Options
while getopts "p:nel" opt; do
    case "$opt" in
	p) print_prefix="$OPTARG" ;;
        n) only_number="true" ;;
	e) show_empty="true" ;;
	l) one_line="true" ;;
        '?') die "Unknown option" ;;
    esac
done

# {{{1 Get packages with updates
updates=$(xbps-install -Sun)

if [[ "$?" != "0" ]]; then
    die "Failed to get packages with updates"
fi

# {{{1 If no updates exit right now
if [ -z "$updates" ]; then
    exit 0
fi

# {{{1 Display
# {{{2 Exit if no updates and -e option is provided
if [ -n "$show_empty" ] && [ -z "$updates" ]; then
    exit 0
fi

# {{{2 Print -p option value
printf "$print_prefix"

if [ -n "$only_number" ]; then
    # {{{2 Only show number of packages with updates
    output=$(echo "$updates" | wc -l)

    if [ -n "$one_line" ]; then
	stdbuf -o 0 printf $(echo "$output" | tr -d '\n')
    else
	echo "$output"
    fi
else
    # {{{2 Show package names
    output=$(echo "$updates" | awk '{ print $1 }')

    if [ -n "$one_line" ]; then
	output_lines=$(echo "$output" | wc -l)
	i=0
	while read -r pkg; do
	    stdbuf -o 0 printf "$pkg"

	    if (("$i" != $(("$output_lines" - 1)))); then
		   stdbuf -o 0 printf " "
	    fi

	    i=$(("$i" + 1))
	done <<< "$output"
    else
	echo "$output"
    fi
fi
